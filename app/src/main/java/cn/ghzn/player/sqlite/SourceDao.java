package cn.ghzn.player.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.ghzn.player.sqlite.source.Source;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOURCE".
*/
public class SourceDao extends AbstractDao<Source, Long> {

    public static final String TABLENAME = "SOURCE";

    /**
     * Properties of entity Source.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Program_id = new Property(1, String.class, "program_id", false, "PROGRAM_ID");
        public final static Property Split_view = new Property(2, String.class, "split_view", false, "SPLIT_VIEW");
        public final static Property Split_mode = new Property(3, String.class, "split_mode", false, "SPLIT_MODE");
        public final static Property Son_source = new Property(4, String.class, "son_source", false, "SON_SOURCE");
        public final static Property Create_time = new Property(5, long.class, "create_time", false, "CREATE_TIME");
        public final static Property Start_time = new Property(6, long.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(7, long.class, "end_time", false, "END_TIME");
        public final static Property Time_difference = new Property(8, long.class, "time_difference", false, "TIME_DIFFERENCE");
        public final static Property First_time = new Property(9, long.class, "first_time", false, "FIRST_TIME");
        public final static Property Relative_time = new Property(10, long.class, "relative_time", false, "RELATIVE_TIME");
        public final static Property License_dir = new Property(11, String.class, "license_dir", false, "LICENSE_DIR");
    }


    public SourceDao(DaoConfig config) {
        super(config);
    }
    
    public SourceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOURCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROGRAM_ID\" TEXT," + // 1: program_id
                "\"SPLIT_VIEW\" TEXT," + // 2: split_view
                "\"SPLIT_MODE\" TEXT," + // 3: split_mode
                "\"SON_SOURCE\" TEXT," + // 4: son_source
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 5: create_time
                "\"START_TIME\" INTEGER NOT NULL ," + // 6: start_time
                "\"END_TIME\" INTEGER NOT NULL ," + // 7: end_time
                "\"TIME_DIFFERENCE\" INTEGER NOT NULL ," + // 8: time_difference
                "\"FIRST_TIME\" INTEGER NOT NULL ," + // 9: first_time
                "\"RELATIVE_TIME\" INTEGER NOT NULL ," + // 10: relative_time
                "\"LICENSE_DIR\" TEXT);"); // 11: license_dir
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOURCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Source entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String program_id = entity.getProgram_id();
        if (program_id != null) {
            stmt.bindString(2, program_id);
        }
 
        String split_view = entity.getSplit_view();
        if (split_view != null) {
            stmt.bindString(3, split_view);
        }
 
        String split_mode = entity.getSplit_mode();
        if (split_mode != null) {
            stmt.bindString(4, split_mode);
        }
 
        String son_source = entity.getSon_source();
        if (son_source != null) {
            stmt.bindString(5, son_source);
        }
        stmt.bindLong(6, entity.getCreate_time());
        stmt.bindLong(7, entity.getStart_time());
        stmt.bindLong(8, entity.getEnd_time());
        stmt.bindLong(9, entity.getTime_difference());
        stmt.bindLong(10, entity.getFirst_time());
        stmt.bindLong(11, entity.getRelative_time());
 
        String license_dir = entity.getLicense_dir();
        if (license_dir != null) {
            stmt.bindString(12, license_dir);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Source entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String program_id = entity.getProgram_id();
        if (program_id != null) {
            stmt.bindString(2, program_id);
        }
 
        String split_view = entity.getSplit_view();
        if (split_view != null) {
            stmt.bindString(3, split_view);
        }
 
        String split_mode = entity.getSplit_mode();
        if (split_mode != null) {
            stmt.bindString(4, split_mode);
        }
 
        String son_source = entity.getSon_source();
        if (son_source != null) {
            stmt.bindString(5, son_source);
        }
        stmt.bindLong(6, entity.getCreate_time());
        stmt.bindLong(7, entity.getStart_time());
        stmt.bindLong(8, entity.getEnd_time());
        stmt.bindLong(9, entity.getTime_difference());
        stmt.bindLong(10, entity.getFirst_time());
        stmt.bindLong(11, entity.getRelative_time());
 
        String license_dir = entity.getLicense_dir();
        if (license_dir != null) {
            stmt.bindString(12, license_dir);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Source readEntity(Cursor cursor, int offset) {
        Source entity = new Source( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // program_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // split_view
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // split_mode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // son_source
            cursor.getLong(offset + 5), // create_time
            cursor.getLong(offset + 6), // start_time
            cursor.getLong(offset + 7), // end_time
            cursor.getLong(offset + 8), // time_difference
            cursor.getLong(offset + 9), // first_time
            cursor.getLong(offset + 10), // relative_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // license_dir
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Source entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProgram_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSplit_view(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSplit_mode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSon_source(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreate_time(cursor.getLong(offset + 5));
        entity.setStart_time(cursor.getLong(offset + 6));
        entity.setEnd_time(cursor.getLong(offset + 7));
        entity.setTime_difference(cursor.getLong(offset + 8));
        entity.setFirst_time(cursor.getLong(offset + 9));
        entity.setRelative_time(cursor.getLong(offset + 10));
        entity.setLicense_dir(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Source entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Source entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Source entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
